/* eslint-disable no-console */
import { showLogger } from '@/constant/env';

class Logger {
  /**
   * Logs an info message
   * @param object - The object to log
   * @param comment - Autogenerated with `lg` snippet
   */
  public static info(object: unknown, comment?: string): void {
    this.log('info', object, comment);
  }

  /**
   * Logs a warning message
   * @param object - The object to log
   * @param comment - Autogenerated with `lg` snippet
   */
  public static warning(object: unknown, comment?: string): void {
    this.log('warning', object, comment);
  }

  /**
   * Logs an error message
   * @param object - The object to log
   * @param comment - Autogenerated with `lg` snippet
   */
  public static error(object: unknown, comment?: string): void {
    this.log('error', object, comment);
  }

  /**
   * A logger function that will only logs on development
   * @param level - The log level (e.g. 'info', 'warning', 'error')
   * @param object - The object to log
   * @param comment - Autogenerated with `lg` snippet
   */
  private static log(level: string, object: unknown, comment?: string): void {
    if (!showLogger) return;

    const logLevel = ['info', 'warning', 'error'].includes(level)
      ? level
      : 'generic';

    if (typeof object === 'tring') {
      console.log(
        `%c ============== ${logLevel.toUpperCase()} LOG \n`,
        `color: #${
          logLevel === 'error'
            ? 'FF0000'
            : logLevel === 'warning'
            ? 'FFA500'
            : '22D3EE'
        }`,
        `${typeof window !== 'undefined' && window?.location.pathname}\n`,
        `=== ${comment ?? ''}\n`,
        object
      );
    } else if (typeof object === 'object') {
      console.log(
        `%c ============== ${logLevel.toUpperCase()} LOG \n`,
        `color: #${
          logLevel === 'error'
            ? 'FF0000'
            : logLevel === 'warning'
            ? 'FFA500'
            : '22D3EE'
        }`,
        `${typeof window !== 'undefined' && window?.location.pathname}\n`,
        `=== ${comment ?? ''}\n`,
        object
      );
    } else {
      console.log(
        `%c ============== ${logLevel.toUpperCase()} LOG \n`,
        `color: #${
          logLevel === 'error'
            ? 'FF0000'
            : logLevel === 'warning'
            ? 'FFA500'
            : '22D3EE'
        }`,
        `${typeof window !== 'undefined' && window?.location.pathname}\n`,
        `=== ${comment ?? ''}\n`,
        JSON.stringify(object, null, 2)
      );
    }
  }
}

export default Logger;
